
import logging
import sqlite3
import random
import asyncio
from datetime import datetime, timedelta
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
import os

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7134890568:AAHv1ca-evbQYry-5MH3E5Y5FwEY8LpcV1M"
ADMIN_ID = 5781330460
BOT_USERNAME = "aviator_signalybot"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)
CASINO_LINK = "https://1win.com"
VALID_ID_PREFIX = "123"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ID –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 123

class AviatorBot:
    def __init__(self):
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect('aviator_bot.db')
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                win_id TEXT,
                attempts_left INTEGER DEFAULT 3,
                last_reset TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                total_attempts INTEGER DEFAULT 0,
                invited_by INTEGER,
                registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS settings (
                key TEXT PRIMARY KEY,
                value TEXT
            )
        ''')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cursor.execute('INSERT OR IGNORE INTO settings (key, value) VALUES (?, ?)', ('casino_link', CASINO_LINK))
        cursor.execute('INSERT OR IGNORE INTO settings (key, value) VALUES (?, ?)', ('valid_id_prefix', VALID_ID_PREFIX))
        
        conn.commit()
        conn.close()
    
    def get_setting(self, key):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect('aviator_bot.db')
        cursor = conn.cursor()
        cursor.execute('SELECT value FROM settings WHERE key = ?', (key,))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result else None
    
    def set_setting(self, key, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect('aviator_bot.db')
        cursor = conn.cursor()
        cursor.execute('INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)', (key, value))
        conn.commit()
        conn.close()
    
    def get_user(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect('aviator_bot.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        conn.close()
        return result
    
    def create_user(self, user_id, username, first_name, invited_by=None):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect('aviator_bot.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO users 
            (user_id, username, first_name, invited_by) 
            VALUES (?, ?, ?, ?)
        ''', (user_id, username, first_name, invited_by))
        conn.commit()
        conn.close()
    
    def update_user_attempts(self, user_id, attempts_left):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect('aviator_bot.db')
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE users 
            SET attempts_left = ?, last_reset = CURRENT_TIMESTAMP 
            WHERE user_id = ?
        ''', (attempts_left, user_id))
        conn.commit()
        conn.close()
    
    def set_user_win_id(self, user_id, win_id):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 1win ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect('aviator_bot.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET win_id = ? WHERE user_id = ?', (win_id, user_id))
        conn.commit()
        conn.close()
    
    def reset_all_attempts(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = sqlite3.connect('aviator_bot.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET attempts_left = 3, last_reset = CURRENT_TIMESTAMP')
        conn.commit()
        conn.close()
    
    def get_all_users(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = sqlite3.connect('aviator_bot.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_id, username, first_name, win_id, attempts_left FROM users')
        result = cursor.fetchall()
        conn.close()
        return result
    
    def check_and_reset_attempts(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Å–±—Ä–æ—Å–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 12 —á–∞—Å–æ–≤"""
        user = self.get_user(user_id)
        if not user:
            return 3
        
        last_reset = datetime.fromisoformat(user[5])  # last_reset —Å—Ç–æ–ª–±–µ—Ü
        current_time = datetime.now()
        
        if current_time - last_reset >= timedelta(hours=12):
            self.update_user_attempts(user_id, 3)
            return 3
        
        return user[4]  # attempts_left —Å—Ç–æ–ª–±–µ—Ü
    
    def generate_coefficient_image(self, coefficient):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –≤ —Å—Ç–∏–ª–µ Aviator"""
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–º–Ω—ã–º —Ñ–æ–Ω–æ–º
        width, height = 400, 300
        img = Image.new('RGB', (width, height), color='#1a1a2e')
        draw = ImageDraw.Draw(img)
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        try:
            font_large = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 60)
            font_small = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 20)
        except:
            font_large = ImageFont.load_default()
            font_small = ImageFont.load_default()
        
        # –†–∏—Å—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        for y in range(height):
            r = int(26 + (30 * y / height))
            g = int(26 + (40 * y / height))
            b = int(46 + (60 * y / height))
            draw.line([(0, y), (width, y)], fill=(r, g, b))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        draw.ellipse([width-100, 20, width-20, 100], outline='#16213e', width=2)
        draw.ellipse([20, height-100, 100, height-20], outline='#16213e', width=2)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
        text = f"{coefficient}x"
        bbox = draw.textbbox((0, 0), text, font=font_large)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        
        x = (width - text_width) // 2
        y = (height - text_height) // 2 - 20
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å
        draw.text((x+3, y+3), text, font=font_large, fill='#000000')
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        draw.text((x, y), text, font=font_large, fill='#00ff88')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = "üõ©Ô∏è AVIATOR SIGNAL"
        title_bbox = draw.textbbox((0, 0), title, font=font_small)
        title_width = title_bbox[2] - title_bbox[0]
        title_x = (width - title_width) // 2
        draw.text((title_x, 30), title, font=font_small, fill='#ffffff')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
        bio = BytesIO()
        img.save(bio, 'PNG')
        bio.seek(0)
        return bio

bot_instance = AviatorBot()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    invited_by = None
    if context.args and context.args[0].startswith('ref='):
        try:
            invited_by = int(context.args[0][4:])
        except ValueError:
            pass
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot_instance.create_user(user.id, user.username, user.first_name, invited_by)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
    if invited_by:
        inviter = bot_instance.get_user(invited_by)
        if inviter:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫—É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
            current_attempts = bot_instance.check_and_reset_attempts(invited_by)
            bot_instance.update_user_attempts(invited_by, current_attempts + 1)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
            try:
                keyboard = [[InlineKeyboardButton("üéØ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª Aviator", callback_data="get_signal")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await context.bot.send_message(
                    invited_by,
                    f"üéâ –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ {user.first_name}, —É –≤–∞—Å –ø–æ—è–≤–∏–ª–∞—Å—å –µ—â—ë –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞!",
                    reply_markup=reply_markup
                )
            except:
                pass
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å—Ä–∞–∑—É
    if user.id == ADMIN_ID:
        keyboard = [
            [InlineKeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="show_admin_panel")],
            [InlineKeyboardButton("üéØ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª Aviator", callback_data="get_signal")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
            f"üéØ –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.",
            reply_markup=reply_markup
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID
    user_data = bot_instance.get_user(user.id)
    if user_data and user_data[3]:  # win_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        attempts_left = bot_instance.check_and_reset_attempts(user.id)
        
        if attempts_left > 0:
            keyboard = [
                [InlineKeyboardButton("üéØ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª Aviator", callback_data="get_signal")],
                [InlineKeyboardButton("üîó –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="my_referral_link")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ \"–°–∏–≥–Ω–∞–ª –æ—Ç Aviator\"! ‚úàÔ∏è\n\n"
                f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts_left}/3\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª! üöÄ",
                reply_markup=reply_markup
            )
        else:
            keyboard = [
                [InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", url=f"https://t.me/share/url?url=https://t.me/{BOT_USERNAME}?start=ref={user.id}&text=üéØ –ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ Aviator! üöÄ%0A–ó–∞–ø—É—Å–∫–∞–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π! üí∞")],
                [InlineKeyboardButton("üîó –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="my_referral_link")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "üòî –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª ‚Äî –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞! üë•",
                reply_markup=reply_markup
            )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        casino_link = bot_instance.get_setting('casino_link')
        keyboard = [[InlineKeyboardButton("‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", callback_data="registered")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ \"–°–∏–≥–Ω–∞–ª –æ—Ç Aviator\"! ‚úàÔ∏è\n\n"
            f"üìã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ:\n"
            f"üîó {casino_link}\n\n"
            f"‚ö†Ô∏è –í–∞–∂–Ω–æ! –ß—Ç–æ–±—ã –±–æ—Ç –¥–∞–ª –≤–∞–º —Å–∏–≥–Ω–∞–ª, —É –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç, "
            f"–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–µ—Ä–µ–∑ —ç—Ç—É —Å—Å—ã–ª–∫—É. –ò–Ω–∞—á–µ –±–æ—Ç –Ω–µ –ø—Ä–∏–º–µ—Ç –≤–∞—à ID!\n\n"
            f"üé∞ –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∫–∞–∑–∏–Ω–æ 1win.",
            reply_markup=reply_markup
        )

async def get_my_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π Telegram ID"""
    user_id = update.effective_user.id
    await update.message.reply_text(f"üÜî –í–∞—à Telegram ID: {user_id}")

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    keyboard = [
        [InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É 1win", callback_data="admin_change_link")],
        [InlineKeyboardButton("üÜî –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID", callback_data="admin_change_id_prefix")],
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list")],
        [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏", callback_data="admin_reset_attempts")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ—Ç–∞ \"–°–∏–≥–Ω–∞–ª –æ—Ç Aviator\"\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "registered":
        await query.edit_message_text(
            "üÜî –í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –æ—Ç 1win:",
            reply_markup=None
        )
        context.user_data['waiting_for_id'] = True
        
    elif data == "enter_id":
        await query.edit_message_text(
            "üÜî –í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –æ—Ç 1win:",
            reply_markup=None
        )
        context.user_data['waiting_for_id'] = True
        
    elif data == "get_signal":
        attempts_left = bot_instance.check_and_reset_attempts(user_id)
        
        if attempts_left <= 0:
            keyboard = [[InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", url=f"https://t.me/share/url?url=https://t.me/{BOT_USERNAME}?start=ref={user_id}&text=üéØ –ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ Aviator! üöÄ%0A–ó–∞–ø—É—Å–∫–∞–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π! üí∞")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "üòî –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª ‚Äî –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞! üë•",
                reply_markup=reply_markup
            )
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        user_data = bot_instance.get_user(user_id)
        total_attempts = user_data[6] if user_data else 0
        
        if total_attempts < 3:
            # –ü–µ—Ä–≤—ã–µ 3 –ø–æ–ø—ã—Ç–∫–∏: –æ—Ç 1.10x –¥–æ 2.3x
            coefficient = round(random.uniform(1.10, 2.30), 2)
        else:
            # –ü–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫: –æ—Ç 1x –¥–æ 10x
            coefficient = round(random.uniform(1.0, 10.0), 2)
        
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        bot_instance.update_user_attempts(user_id, attempts_left - 1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        conn = sqlite3.connect('aviator_bot.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET total_attempts = total_attempts + 1 WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = bot_instance.generate_coefficient_image(coefficient)
        
        new_attempts_left = attempts_left - 1
        
        if new_attempts_left > 0:
            keyboard = [[InlineKeyboardButton("üéØ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª Aviator", callback_data="get_signal")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            caption = f"üéØ –í–∞—à —Å–∏–≥–Ω–∞–ª: {coefficient}x\n\nüìä –ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {new_attempts_left}/3"
        else:
            keyboard = [[InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", url=f"https://t.me/share/url?url=https://t.me/{BOT_USERNAME}?start=ref={user_id}&text=üéØ –ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ Aviator! üöÄ%0A–ó–∞–ø—É—Å–∫–∞–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π! üí∞")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            caption = f"üéØ –í–∞—à —Å–∏–≥–Ω–∞–ª: {coefficient}x\n\nüìä –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫."
        
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=image,
            caption=caption,
            reply_markup=reply_markup
        )
    
    elif data == "show_admin_panel" and user_id == ADMIN_ID:
        keyboard = [
            [InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É 1win", callback_data="admin_change_link")],
            [InlineKeyboardButton("üÜî –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID", callback_data="admin_change_id_prefix")],
            [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list")],
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏", callback_data="admin_reset_attempts")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ—Ç–∞ \"–°–∏–≥–Ω–∞–ª –æ—Ç Aviator\"\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    elif data == "my_referral_link":
        referral_link = f"https://t.me/{BOT_USERNAME}?start=ref={user_id}"
        share_link = f"https://t.me/share/url?url={referral_link}&text=üéØ –ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ Aviator! üöÄ%0A–ó–∞–ø—É—Å–∫–∞–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π! üí∞"
        
        keyboard = [
            [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=share_link)],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n"
            f"`{referral_link}`\n\n"
            f"üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º!\n"
            f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ +1 –ø–æ–ø—ã—Ç–∫—É!",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif data == "back_to_main":
        user_data = bot_instance.get_user(user_id)
        if user_data and user_data[3]:  # win_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            attempts_left = bot_instance.check_and_reset_attempts(user_id)
            
            if attempts_left > 0:
                keyboard = [
                    [InlineKeyboardButton("üéØ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª Aviator", callback_data="get_signal")],
                    [InlineKeyboardButton("üîó –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="my_referral_link")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ \"–°–∏–≥–Ω–∞–ª –æ—Ç Aviator\"! ‚úàÔ∏è\n\n"
                    f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts_left}/3\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª! üöÄ",
                    reply_markup=reply_markup
                )
            else:
                keyboard = [
                    [InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", url=f"https://t.me/share/url?url=https://t.me/{BOT_USERNAME}?start=ref={user_id}&text=üéØ –ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ Aviator! üöÄ%0A–ó–∞–ø—É—Å–∫–∞–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π! üí∞")],
                    [InlineKeyboardButton("üîó –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="my_referral_link")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "üòî –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª ‚Äî –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞! üë•",
                    reply_markup=reply_markup
                )
    
    # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    elif data.startswith("admin_") and user_id == ADMIN_ID:
        if data == "admin_change_link":
            await query.edit_message_text(
                "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–∑–∏–Ω–æ 1win:",
                reply_markup=None
            )
            context.user_data['admin_waiting_for'] = 'casino_link'
            
        elif data == "admin_change_id_prefix":
            await query.edit_message_text(
                "üÜî –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö ID (—Ü–∏—Ñ—Ä—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–æ–≤—ã–µ ID):",
                reply_markup=None
            )
            context.user_data['admin_waiting_for'] = 'id_prefix'
            
        elif data == "admin_users_list":
            users = bot_instance.get_all_users()
            if not users:
                await query.edit_message_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
                return
            
            text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            for user in users[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 20
                user_id_str, username, first_name, win_id, attempts_left = user
                username_str = f"@{username}" if username else "–ù–µ—Ç username"
                win_id_str = win_id if win_id else "–ù–µ —É–∫–∞–∑–∞–Ω"
                text += f"üÜî {user_id_str}\nüë§ {first_name} ({username_str})\nüé∞ 1win ID: {win_id_str}\nüìä –ü–æ–ø—ã—Ç–∫–∏: {attempts_left}/3\n\n"
            
            if len(users) > 20:
                text += f"... –∏ –µ—â–µ {len(users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            await query.edit_message_text(text[:4000])  # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            
        elif data == "admin_reset_attempts":
            bot_instance.reset_all_attempts()
            await query.edit_message_text("‚úÖ –ü–æ–ø—ã—Ç–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã!")

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if context.user_data.get('waiting_for_id'):
        context.user_data['waiting_for_id'] = False
        
        valid_prefix = bot_instance.get_setting('valid_id_prefix')
        
        if not text.startswith(valid_prefix):
            casino_link = bot_instance.get_setting('casino_link')
            keyboard = [
                [InlineKeyboardButton("üé∞ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Ç—É—Ç", url=casino_link)],
                [InlineKeyboardButton("üÜî –í–≤–µ–¥–∏—Ç–µ ID –æ—Ç 1win", callback_data="enter_id")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "‚ùå –í—ã –≤–≤–µ–ª–∏ —Å—Ç–∞—Ä—ã–π ID. –í—ã –¥–æ–ª–∂–Ω—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —ç—Ç—É —Å—Å—ã–ª–∫—É –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π ID –æ—Ç 1win.",
                reply_markup=reply_markup
            )
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–π ID
            bot_instance.set_user_win_id(user_id, text)
            
            attempts_left = bot_instance.check_and_reset_attempts(user_id)
            keyboard = [[InlineKeyboardButton("üéØ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª Aviator", callback_data="get_signal")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ ID —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\nüéØ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã Aviator.\nüìä –£ –≤–∞—Å {attempts_left}/3 –ø–æ–ø—ã—Ç–æ–∫.",
                reply_markup=reply_markup
            )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    elif context.user_data.get('admin_waiting_for') and user_id == ADMIN_ID:
        waiting_for = context.user_data['admin_waiting_for']
        context.user_data['admin_waiting_for'] = None
        
        if waiting_for == 'casino_link':
            bot_instance.set_setting('casino_link', text)
            await update.message.reply_text(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–∑–∏–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {text}")
            
        elif waiting_for == 'id_prefix':
            bot_instance.set_setting('valid_id_prefix', text)
            await update.message.reply_text(f"‚úÖ –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö ID –æ–±–Ω–æ–≤–ª–µ–Ω: {text}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("myid", get_my_id))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    
    # –ó–∞–ø—É—Å–∫
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
